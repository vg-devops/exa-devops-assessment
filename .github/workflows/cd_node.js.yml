name: DEPLOYMENT

on:
  workflow_dispatch:
    inputs:
      start_environment:
        description: 'Choose deployment environment...'
        required: true
        type: choice
        options:
        - development
        - testing
        - staging
        - production

env:
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  NAMESPACE: ${{ secrets.NAMESPACE }}
  CI_WORKFLOW_NAME: "BUILD"

jobs:
  fetch_latest_build:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.get_build_info.outputs.docker_tag }}
    steps:
    - name: Get latest successful Build ID
      id: get_build_run
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
            // List and print all repo workflows
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            console.log("Available workflows:");
            workflows.workflows.forEach(wf => console.log(wf.name));
 
            const ciWorkflow = workflows.workflows.find(wf => wf.name === process.env.CI_WORKFLOW_NAME);
            if (!ciWorkflow) {
              core.setFailed(`Workflow "${process.env.CI_WORKFLOW_NAME}" not found`);
              return;
            }
  
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: ciWorkflow.id,
              status: 'success',
              branch: 'feature/TKT-000',
              per_page: 1
            });
       
            core.setOutput('run_id', runs.workflow_runs[0].id);
            console.log(`Latest successful run ID: ${runs.workflow_runs[0].id}`);            

    - name: Download latest artifact
      uses: actions/download-artifact@v4
      with:
        name: build-info
        path: ./
        run-id: ${{ steps.get_build_run.outputs.run_id }}
        github-token: ${{secrets.GITHUB_TOKEN}} 

    - name: Obtain build information
      id: get_build_info
      run: |
        DOCKER_TAG=$(cat build_info.txt)
        echo "docker_tag=${DOCKER_TAG}"
        echo "docker_tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT

  deploy:
      needs: fetch_latest_build
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.start_environment }}
 
     
