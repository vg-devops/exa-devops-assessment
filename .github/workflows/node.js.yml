# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: BUILD

on:
  push:
    branches: [ "feature/*" ]

env:
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.18.0]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './src/package-lock.json'

    - name: Install Dependencies
      run: npm ci
      working-directory: ./src

    - name: Run NPM Tests
      run: npm run test
      working-directory: ./src

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        mask-aws-account-id: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    
    - name: Check and Create ECR Repository
      run: |
        ECR_REPOSITORY="${{ github.event.repository.name }}"
        if ! aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --query 'repositories[0].repositoryName' --region ${{ secrets.AWS_REGION }} --output text >/dev/null 2>&1; then
          echo "Repository does not exist. Creating..."
         aws ecr create-repository --repository-name "$ECR_REPOSITORY" --region ${{ secrets.AWS_REGION }} --image-scanning-configuration scanOnPush=false ## cheaper option, use for test project
        else
          echo "Repository already exists"
        fi

    - name: Define Docker Tag from Feature and Build Number
      id: define-docker-tag
      run: |
        # Extract feature name and replace slash: '/' with dash: '-'
        FEATURE_NAME=$(echo ${{ github.ref_name }} | sed 's/feature\///' | sed 's/\//-/g' | sed 's/\(.\{115\}\).*/\1/') # add truncation for max tag length
        # Combine build number and feature name for the tag
        DOCKER_TAG="${{ github.run_number }}-feature-${FEATURE_NAME}"
        echo "DOCKER_TAG=${DOCKER_TAG}" >> $GITHUB_OUTPUT

    - name: Docker building, tagging and pushing image to AWS ECR
      env:
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ github.event.repository.name }}
        IMAGE_TAG: ${{ steps.define-docker-tag.outputs.DOCKER_TAG }}
      run: |
        docker build -f dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Keep Build Information
      env:
        build_data : ${{ steps.define-docker-tag.outputs.DOCKER_TAG }}
      run: |
        echo "$build_data" > build_info.txt

    - name: Upload Build Info as Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: build_info.txt        